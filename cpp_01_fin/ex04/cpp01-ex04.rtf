{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww21540\viewh23560\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
If stream -> en <fstream>\
\
std::ifstream file(argv[1]);\
\
Crea un flujo de fichero input. El flujo de input se identifica con el nombre que le pongas seguidamente (aqu\'ed, file).\
Toma el contenido de lo que le pones entre par\'e9ntesis. Sin embargo, no lo hace de forma instant\'e1nea, es como si creara un link.\
Para leer el contenido, hay que usar getline (quiz\'e1s otro?).\
Para abrir archivos:\
std::ifstream file("mi_archivo.txt");\
Esto abrir\'e1 mi_archivo.txt y lo dirigir\'e1 al input file.\
\
.is_open()\
Funci\'f3n  miembro de ifstream. Dice si se ha abierto algo o no.\
Ejemplo de uso: if (!file.is_open())\
Aqui comprobamos si file se ha abierto.\
\
\
std::ofstream \
Se utiliza para escribir en archivos. Cuando abres un archivo con std::ofstream, el objeto se asocia para operaciones de escritura. \
Si el archivo no existe, se crea; si existe, su contenido se sobrescribe.\
Ejemplo: std::ofstream replaced(std::string(argv[1]) + ".replace");\
Sintaxis: std::ofstream nombref_lujo(Nombre_Archivo); \
\
getline\
Lee linea a linea. Es una funci\'f3n que lee una l\'ednea completa del archivo asociado al flujo de entrada\
Ejemplo de uso: while (std::getline(file, line))\
Sintaxis: std::getline(Nombre_flujo, string_en_que_almacena_lo_leido);\
Esto crea una acci\'f3n determinada sobre cada linea de un flujo de input. Es decir, lee linea a linea de file y hace lo que pongamos debajo.\
Line tiene que estar definida como una string, pero sin contenido, el contenido se lo va a dar getline.\
\
.find\
find es una funci\'f3n miembro de la clase std::string en C++. Se utiliza para buscar la primera ocurrencia de una subcadena dentro de una cadena m\'e1s grande. Cuando la encuentra, devuelve la posici\'f3n (\'edndice) en la que comienza la subcadena o, si no la encuentra, devuelve std::string::npos.\
\
Ejemplo de uso: size_t position = line.find(s1);\
Tipico codigo con .find:\
\
size_t position = line.find(s1);\
if (position != std::string::npos) \{\
    // Se encontr\'f3 la subcadena s1 en line, y position contiene la posici\'f3n de inicio.\
    // Puedes realizar alguna acci\'f3n aqu\'ed.\
\} else \{\
    // No se encontr\'f3 la subcadena s1 en line.\
\}\
\
\
Substring - substr\
std::string::cadena.substr(size_t pos, size_t len);\
std::string substr(size_t pos = 0, size_t count = npos) const;\
find es una funci\'f3n miembro de la clase std::string en C++.\
std::string sub = text.substr(7, 5); // Extraer desde la posici\'f3n 7 de la cadena text, 5 caracteres. Lo guarda en sub.\
\
\pard\pardeftab720\sa240\partightenfactor0
\cf2 En resumen, replaced << replacedLine << std::endl; toma la cadena replacedLine, la inserta en el archivo de salida replaced y agrega una nueva l\'ednea despu\'e9s de escribir la cadena. Esto es \'fatil para asegurarse de que cada l\'ednea escrita en el archivo de salida est\'e9 en una nueva l\'ednea para que los datos se vean organizados y legibles en el archivo resultante.\
}